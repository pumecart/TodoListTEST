@page "/login"

@using PersonalPlanner.Data
@using PersonalPlanner.Models.ViewModels
@using PersonalPlanner.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using MongoDB.Driver;
@inject MongoDBContext dbContext
@inject NavigationManager navigationManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center dlex-column">
                <img src="/images/avatar.png" style="max-height:5rem" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var user = await dbContext.Users.Find(u => u.user_name == Model.Username).FirstOrDefaultAsync();

        if (user != null && VerifyPassword(Model.Password, user.password))
        {
            var claims = new List<Claim>
{
new Claim(ClaimTypes.Name, user.user_name),
new Claim(ClaimTypes.Role, user.role)
};
            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(claimsIdentity);
            await HttpContext.SignInAsync(principal);
            // Redirect to the home page or any other page
            navigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
            return;
        }
    }

    private bool VerifyPassword(string enteredPassword, string storedPassword)
    {
        return BCrypt.Net.BCrypt.Verify(enteredPassword, storedPassword);
    }

}
