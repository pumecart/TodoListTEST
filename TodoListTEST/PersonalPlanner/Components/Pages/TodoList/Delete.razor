@page "/Todos/Delete"
@using MongoDB.Driver
@inject PersonalPlanner.Data.MongoDBContext DB
@using PersonalPlanner
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>To-Do Task</h4>
    <hr />
    @if (Todo is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">To-do Task</dt>
            <dd class="col-sm-10">@Todo.Todo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Due Date</dt>
            <dd class="col-sm-10">@Todo.DueDate</dd>
        </dl>
        <EditForm method="post" Model="Todo" OnValidSubmit="DeleteTodo" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Todo is null)">Delete</button> |
            <a href="/Todos">Back to List</a>
        </EditForm>
    }
</div>

@code {
    TodoTask? Todo;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            NavigationManager.NavigateTo("/Todos");
            return;
        }

        var filter = Builders<TodoTask>.Filter.Eq(t => t.Id, Todo?.Id);
        Todo = await DB.Todo.Find(filter).FirstOrDefaultAsync();

        if (Todo == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteTodo()
    {
        if (Todo == null) return;

        var filter = Builders<TodoTask>.Filter.Eq(t => t.Id, Todo.Id);
        var deleteResult = await DB.Todo.DeleteOneAsync(filter);

        if (deleteResult.DeletedCount == 0)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            NavigationManager.NavigateTo("/Todos");
        }

        @* DB.Todo.Remove(Todo!);
await DB.SaveChangesAsync();
NavigationManager.NavigateTo("/Todos"); *@
    }
}